/*
 * This source file was generated by the Gradle 'init' task
 */
package esg.gradle;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Base64;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.commons.lang3.StringUtils;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.opencsv.CSVReader;

public class App {
    

    public static void main(String[] args) throws IllegalArgumentException, InterruptedException {

        /* customise as required */
        var baseUrl = "https://localhost:7111";
        var csvPath = "C:/ESG/Customers.csv";
        var username ="bill";
        var password = "12345678";

        /* generate the basic auth required */
        var authentication = String.format("%s:%s", username, password);
        var authenticationBase64 = String.format("Basic %s", new String(Base64.getEncoder().encode(authentication.getBytes())));
       
        /* do not do this in production! */
        disableSSLCertificateChecking();

        var readResult = readCustomersFromCSVFile(csvPath);
        if (!readResult.success) {
            System.out.println(readResult.errorMessage);
        }
        
        else {
            var customerList = readResult.data;

            for(var customer : customerList) {

                var postResult = postCustomerToApi(baseUrl, authenticationBase64, customer);
                if (!postResult.success){
                    System.out.println(postResult.errorMessage);
                }
                else {
                    System.out.println(String.format("Customer %s created", customer.customerRef));   
                }
            }
        }

        var getResult = getCustomerFromApi(baseUrl, authenticationBase64, "012254");
        if (!getResult.success) {
            System.out.println(getResult.errorMessage);
        }
        else {
            System.out.println(String.format("Customer %s recovered", getResult.data.customerRef));
        }
    }

    private static Result<ArrayList<Customer>>readCustomersFromCSVFile(String filePath) {

        var customerList = new ArrayList<Customer>();
        var result = new Result<ArrayList<Customer>>();
        var errorList = new ArrayList<String>();

        try {
            var fileReader = new FileReader(filePath);
            var lineCount = 1;
            String[] fields ;

            try (var csvReader = new CSVReader(fileReader)) {

                while ((fields = csvReader.readNext()) != null) {

                    /* allow empty lines */ 
                    if (fields.length == 1 && StringUtils.isEmpty(fields[0])) {
                    }

                    /* test for completeness */
                    else if (fields.length != 8) {
                        errorList.add(String.format("Line %d: 8 fields are required per customer", lineCount));
                    }
                    else if (StringUtils.isEmpty(fields[0])){
                        errorList.add(String.format("Line %d: Customer reference missing", lineCount));
                    }
                    else {
                  
                        var customer = new Customer();
                        customer.customerRef = fields[0];
                        customer.customerName = fields[1];
                        customer.addressLine1 = fields[2];
                        customer.addressLine2 = fields[3];
                        customer.town = fields[4];
                        customer.county = fields[5];
                        customer.country = fields[6];
                        customer.postcode = fields[7];
                        
                        customerList.add(customer); 
                     }

                     lineCount++;
                }
            }        
            result.data = customerList;
        } 
        catch (FileNotFoundException e) {
            result.setFail(String.format("FileNotFoundException: %s", e.getMessage()));
        }
        catch (IOException e) {
            result.setFail(String.format("IOException: %s", e.getMessage()));
        }
 
        if (!errorList.isEmpty()) {
            result.setFail(String.format("Some customers were not valid in the csv:\r\n%s", String.join("\r\n", errorList)));
        }

        return result;
    }
    
     public static Result<Integer> postCustomerToApi(String baseUrl, String basicAuthentication, Customer customer)
    {
        var result = new Result<Integer>();

        var customerJson = new Gson().toJson(customer, Customer.class);

        try {
            var customerBytes = customerJson.getBytes("UTF-8") ;

            var url = URI.create(String.format("%s/customer", baseUrl)).toURL();
            var http = (HttpsURLConnection) url.openConnection();
      
            http.setRequestMethod("POST"); // PUT is another valid option
            http.setDoOutput( true );
            http.setInstanceFollowRedirects( false );
            http.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            http.setRequestProperty( "Content-Length", Integer.toString(customerBytes.length));
            http.setRequestProperty("Authorization", basicAuthentication);

            try(var outputStream = new DataOutputStream( http.getOutputStream())) {
                outputStream.write( customerBytes );
            }
    
            int responseCode = http.getResponseCode();
            if (responseCode != 201) {

                var responseBuilder = new StringBuilder();
                var inputLine = "";

                try (java.io.BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(http.getErrorStream()))) {
                    while ((inputLine = bufferedReader.readLine()) != null) {
                        responseBuilder.append(inputLine);
                    }
                }
                result.setFail(String.format("Record not created: %s", responseBuilder.toString()));
                result.data = responseCode;
             }
        } 
        catch (IOException e) {
            result.setFail(String.format("IOException: %s", e.getMessage()));
        }
        
        return result;
    }

    public static Result<Customer> getCustomerFromApi(String baseUrl, String basicAuthentication, String reference)  {

        var result = new Result<Customer>();
        try {

            var resource = URI.create(String.format("%s/customer?reference=%s", baseUrl, reference)).toURL();
            var responseBuilder = new StringBuilder();

            var http = (HttpsURLConnection) resource.openConnection();
      
            http.setRequestMethod("GET"); 
            http.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            http.setRequestProperty("Authorization", basicAuthentication);

            var responseCode = http.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) { // success
                var in = new BufferedReader(new InputStreamReader(http.getInputStream()));
                var inputLine = "";

                while ((inputLine = in.readLine()) != null) {
                    responseBuilder.append(inputLine);
                }
                in.close();

                result.data = new Gson().fromJson(responseBuilder.toString(), Customer.class);
            }
            else {
                result.setFail(String.format("Unable to recover customer: response %d", responseCode));
            }
        }
        catch (IOException e) {
            result.setFail(String.format("IOException: %s", e.getMessage()));
        }
        catch (JsonSyntaxException e) {
            result.setFail(String.format("JsonSyntaxException: %s", e.getMessage()));
        }

        return result;
    }

    public static class Result<T1> {
        
        public Boolean  success = true;
        public String   errorMessage;
        public T1       data;

        public void setFail (String errorMessage) {
            this.success = false;
            this.errorMessage = errorMessage;
        }
    }

    public static class Customer {
    
        public String customerRef;
        public String customerName;
        public String addressLine1;
        public String addressLine2;
        public String town;
        public String county;
        public String country;
        public String postcode;
    }
    
    /* disables the SSL certificate checking for new instances of {@link HttpsURLConnection} This has been created to */
    /* aid testing on a local box, not for use on production. */
     private static void disableSSLCertificateChecking() {
        TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
            public X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            @Override
            public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
                // Not implemented
            }

            @Override
            public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
                // Not implemented
            }
        } };

        try {
            SSLContext sc = SSLContext.getInstance("TLS");

            sc.init(null, trustAllCerts, new java.security.SecureRandom());

            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        } catch (KeyManagementException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
}


